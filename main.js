/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    this.registerEvent(this.app.vault.on("modify", (file) => {
      var path = file.path;
      path = path.substring(0, path.lastIndexOf("/"));
      if (path == this.settings.mySetting) {
        this.UpdateFiles(file);
      }
    }));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  UpdateFiles(file) {
    var _a;
    var tFile = this.app.vault.getFileByPath(file.path);
    var tagsArray = [];
    if (tFile instanceof import_obsidian.TFile) {
      var tagsObj = (_a = this.app.metadataCache.getCache(file.path)) == null ? void 0 : _a.tags;
      tagsObj == null ? void 0 : tagsObj.forEach((tag) => {
        tagsArray.push(tag.tag);
      });
      new import_obsidian.Notice("tags collected");
      var filesWithTags = this.FindFilesWithTag(tagsArray);
      new import_obsidian.Notice(filesWithTags.length.toString());
      filesWithTags.forEach((element) => {
        if (tFile != null) {
          this.ModifyContent(element, tFile);
        } else {
          new import_obsidian.Notice("file is null");
        }
      });
    }
  }
  async ModifyContent(file, temaplte) {
    var _a, _b;
    var templateFrontmatter = (_a = this.app.metadataCache.getFileCache(temaplte)) == null ? void 0 : _a.frontmatter;
    var fileFrontmatter = (_b = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
    if (templateFrontmatter != void 0) {
      var templateProperties = Object.keys(templateFrontmatter);
      var fileContent = [];
      await Promise.resolve(this.app.vault.read(file)).then((content) => {
        fileContent = content.split("---");
      });
      var newContent = "";
      if (fileContent.length > 1) {
        var fileProperties = fileContent[0];
        fileProperties = fileProperties.replace("---", "");
        for (var i = 0; i < templateProperties.length; i++) {
          if (fileProperties.includes(templateProperties[i] + ":")) {
          } else {
            fileProperties += "\n" + templateProperties[i] + ":";
          }
        }
        fileProperties = "---" + fileProperties + "\n---";
        newContent = fileProperties + fileContent[2];
      } else {
        newContent = templateFrontmatter + fileContent[0];
      }
      this.app.vault.modify(file, newContent);
      new import_obsidian.Notice("file updated");
    }
  }
  FindFilesWithTag(tags) {
    var filesWithTag = [];
    this.app.vault.getMarkdownFiles().forEach((file) => {
      var _a;
      if (file.path.substring(0, file.path.lastIndexOf("/")) == this.settings.mySetting) {
      } else {
        var fileTags = (_a = this.app.metadataCache.getCache(file.path)) == null ? void 0 : _a.tags;
        if (fileTags != void 0) {
          var fileTagsArray = [];
          fileTags == null ? void 0 : fileTags.forEach((tag) => {
            fileTagsArray.push(tag.tag);
          });
          var hasAllTags = true;
          for (var i = 0; i < tags.length; i++) {
            if (fileTagsArray.includes(tags[i])) {
            } else {
              hasAllTags = false;
              break;
            }
          }
          if (hasAllTags) {
            filesWithTag.push(file);
          }
        }
      }
    });
    return filesWithTag;
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Temaplte folder").setDesc("select folder where templates are stored").addText((text) => text.setPlaceholder("Template folder").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
